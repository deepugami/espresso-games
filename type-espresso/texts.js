// Drop your own texts here.
// Provide an array of strings. Each string is a typing passage.
// Example entries are placeholders you can replace.
window.TYPE_ESPRESSO_TEXTS = [
  "Espresso is a global confirmation layer that provides L2 chains with fast, reliable transaction confirmations backed by BFT consensus. Espresso confirmations can improve cross-chain composability, as they provide chains with near-instant access to reliable, credibly neutral information about what’s happening not just on their own chain, but on all chains plugged into the network. Espresso's confirmation layer can prevent sequencer equivocation, protect against reorgs, and reduce finality risk for solvers in intent-based systems. Its versatility means chains can also use it as a decentralized sequencer and low-cost data availability layer. The Espresso Network is currently in its Mainnet 0 release and supports applications by providing the following functionality: Fast confirmations: HotShot, the consensus protocol used by the Espresso Network, confirms transactions within a few seconds. This enables bridges to move assets from chains integrated with Espresso at high speeds with minimal risk. Chains can maintain a centralized sequencer while opting in to Espresso for stronger confirmations. Decentralized sequencing: 100 nodes will be running the Espresso Network in a decentralized manner during Mainnet 0. Rollups can opt into having their transactions sequenced by this group of 100 nodes, instead of using their own centralized sequencer. We plan to quickly scale the number of participating nodes and enable permissionless proof-of-stake-based participation following the Mainnet 0 release. Low-cost data availability: Espresso offers applications a cheaper alternative to Ethereum for DA. Any integration with Espresso can take advantage of Espresso's strong data availability guarantee to improve its scalability. Chains and applications can quickly get started with using Espresso following these general integration steps.",
  "The Espresso Network offers developers a modular platform with three key optional components: confirmations, data availability, and decentralized sequencing. A chain can choose to use any combination of these features, allowing it to integrate Espresso into its existing stack without needing to overhaul its entire design. Espresso’s core feature is providing fast and reliable confirmations. This is a significant benefit for any chain, as it replaces the need for users and bridges to rely on pre-confirmations from a single, centralized sequencer, thereby increasing security and reliability. The network provides these confirmations regardless of a chain's choices for data availability or sequencing. For example, a standard rollup using a centralized sequencer and Ethereum for data availability can still leverage Espresso for its robust confirmations. Similarly, a based rollup that uses Ethereum's proposer for sequencing can also use Espresso to get quicker confirmations than waiting for an Ethereum L1 block. Beyond confirmations, a chain can optionally use Espresso for data availability (DA). This means the chain publishes its transaction data to the Espresso Network, which is designed to be highly efficient. However, Espresso is built to be compatible with other DA solutions. A chain can still use Espresso while opting to store its data on Ethereum, Celestia, EigenDA, or Avail. This flexibility allows a chain to choose its preferred data availability layer while still benefiting from Espresso's other services.",
  "The Espresso Network, serving as a global confirmation layer, provides a shared source of truth for transaction ordering and data across multiple blockchains. It achieves this by using a BFT consensus protocol called HotShot, which allows rollup transactions to be processed and confirmed within seconds. This rapid confirmation gives chains certainty about what state will eventually be finalized on the L1, long before the transaction is settled on Ethereum. The system prevents a sequencer from changing a transaction's order once it has been confirmed by HotShot. This is a significant improvement over relying on various centralized sequencers for pre-confirmations, which are more susceptible to manipulation from hacks or malicious actors. By using a shared, decentralized consensus protocol, the Espresso Network strengthens the entire L2 ecosystem against such threats. The benefits of the Espresso Network are particularly evident for applications that interact with multiple chains, like bridges. Today, it can take up to 15 minutes to move funds from a rollup, as the transaction must first be finalized on the Ethereum L1. With HotShot, however, a bridging transaction can be confirmed and completed in seconds, offering similar security guarantees without the long wait. The security guarantees of HotShot are comparable to those of the Ethereum L1 itself. An adversary would need to control at least one-third of the total stake to revert a confirmed transaction. This is secured by a slashing mechanism, which makes it extremely expensive for a bad actor to attempt a reversal. Over time, as more stake is integrated through restaking, HotShot's safety guarantees are expected to become as robust as those of the Ethereum L1.", 
  "The Espresso Network provides a powerful Global Confirmation Layer that rollups and bridges can use to gain fast, secure confirmations on transaction ordering and data. This layer, powered by the HotShot BFT consensus protocol, is designed to be an additive component, meaning a rollup can continue to offer its own pre-confirmations from a centralized sequencer while giving users the option to wait a few seconds for a stronger, decentralized confirmation from Espresso. This dual-confirmation system empowers end-users to choose their preferred level of security and speed. The fundamental process for using Espresso involves three core steps: sending data to the network, fetching the data after it's been confirmed, and then verifying the Espresso consensus within the chain's state transition function (STF). For developers looking to integrate the Espresso Network, it's recommended to run an Espresso node and use its query service to ensure all received data is properly validated. Alternatively, they can connect to Espresso's API services or use the espresso-dev-node Docker image for local testing. The first step, sending data to Espresso, involves the rollup choosing a unique integer namespace ID to identify its transactions. The chain then sends its data, which can be encoded in any way it chooses, along with this namespace ID as an Espresso transaction. These transactions can be submitted to either the public submit endpoint of a sequencer node or to a builder, which may offer private mempools for greater privacy. After the data has been sent, the next step is fetching it from Espresso once it has been confirmed. The Espresso network finalizes blocks that are divided by namespace, so a rollup only needs to consider the transactions within its specific namespace ID. To receive timely notifications about newly finalized blocks, chains must connect directly to the Espresso query service API, as the update interval for the sequencer contract on the L1 is significantly slower.",
  "The confirmed transaction data can then be retrieved from the Espresso DA layer using various API endpoints provided by the query service. The final and most crucial step is verifying the Espresso consensus within the rollup's state transition function (STF). The STF must ensure that the transactions it's executing were indeed confirmed as part of a finalized Espresso block and that this block is part of the canonical Espresso chain. This involves two main checks. First, the STF must verify a Savoiardi VID proof to confirm that the transactions are exactly those contained in the rollup's namespace within the finalized Espresso block. Second, it must verify the Espresso block Merkle proof against the commitment stored in the Espresso light client contract on the L1 to confirm the block's canonical status. The STF must also have mechanisms in place to prevent any confirmed transactions from being skipped or applied more than once. An excellent example of this integration is the Arbitrum Nitro stack, which demonstrates how Espresso's consensus can be verified within a real-world application's STF. In this implementation, a Justification, or Attestation, is submitted to the Nitro parent chain. This justification contains the necessary namespace and block Merkle proofs for validation. The Arbitrum Nitro STF's replay binary performs the Espresso-specific validation by calling Rust code to verify the namespace and Merkle proof. The integration also includes additions to the Arbitrator smart contract to read and validate the HotShot/Espresso commitment from the sequencer contract, along with corresponding Host IO functionality to provide this external data to the stateless STF when validators and stakers execute it locally. This comprehensive approach ensures that the rollup’s state is built upon a foundation of secure and verifiable confirmations from the Espresso Network.",
];


